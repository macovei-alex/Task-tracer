<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Server</name>
    </assembly>
    <members>
        <member name="T:Server.Controllers.ExercisesController">
            <summary>
            An exercise controller.
            </summary>
        </member>
        <member name="T:Server.Controllers.TasksController">
            <summary>
            Controller for managing tasks.
            </summary>
        </member>
        <member name="M:Server.Controllers.TasksController.#ctor(Server.Services.ITasksCollectionService)">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Controllers.TasksController"/> class.
            </summary>
            <param name="taskCollectionService">The service for managing tasks in a collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when taskCollectionService is null.</exception>
        </member>
        <member name="M:Server.Controllers.TasksController.GetTasks">
            <summary>
            Gets all tasks.
            </summary>
            <returns>A list of tasks.</returns>
        </member>
        <member name="M:Server.Controllers.TasksController.CreateTask(Server.Models.TaskModel)">
            <summary>
            Creates a new task.
            </summary>
            <param name="task">The task to create.</param>
            <returns>The created task.</returns>
        </member>
        <member name="M:Server.Controllers.TasksController.UpdateTask(Server.Models.TaskModel)">
            <summary>
            Updates an existing task.
            </summary>
            <param name="task">The task to update.</param>
            <returns>The updated task.</returns>
        </member>
        <member name="M:Server.Controllers.TasksController.DeleteTask(System.String)">
            <summary>
            Deletes a task.
            </summary>
            <param name="id">The ID of the task to delete.</param>
            <returns>A list of tasks after deletion.</returns>
        </member>
        <member name="T:Server.Models.TaskModel">
            <summary>
            Represents a task.
            </summary>
        </member>
        <member name="P:Server.Models.TaskModel.Id">
            <summary>
            Gets or sets the ID of the task.
            </summary>
        </member>
        <member name="P:Server.Models.TaskModel.Title">
            <summary>
            Gets or sets the title of the task.
            </summary>
        </member>
        <member name="P:Server.Models.TaskModel.Description">
            <summary>
            Gets or sets the description of the task.
            </summary>
        </member>
        <member name="P:Server.Models.TaskModel.AssignedTo">
            <summary>
            Gets or sets the person the task is assigned to.
            </summary>
        </member>
        <member name="P:Server.Models.TaskModel.Status">
            <summary>
            Gets or sets the status of the task.
            </summary>
        </member>
        <member name="T:Server.Services.ICollectionService`1">
            <summary>
            Interface for a collection service.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:Server.Services.ICollectionService`1.GetAll">
            <summary>
            Gets all items in the collection.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a list of items in the collection.</returns>
        </member>
        <member name="M:Server.Services.ICollectionService`1.Get(System.Guid)">
            <summary>
            Gets an item by its identifier.
            </summary>
            <param name="id">The identifier of the item.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the item if found, null otherwise.</returns>
        </member>
        <member name="M:Server.Services.ICollectionService`1.Create(`0)">
            <summary>
            Creates a new item in the collection.
            </summary>
            <param name="model">The item to create.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating whether the creation was successful.</returns>
        </member>
        <member name="M:Server.Services.ICollectionService`1.Update(System.Guid,`0)">
            <summary>
            Updates an existing item in the collection.
            </summary>
            <param name="id">The identifier of the item to update.</param>
            <param name="model">The updated item.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating whether the update was successful.</returns>
        </member>
        <member name="M:Server.Services.ICollectionService`1.Delete(System.Guid)">
            <summary>
            Deletes an item from the collection.
            </summary>
            <param name="id">The identifier of the item to delete.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating whether the deletion was successful.</returns>
        </member>
        <member name="T:Server.Services.ITasksCollectionService">
            <summary>
            Interface for a service that manages tasks in a collection.
            </summary>
        </member>
        <member name="M:Server.Services.ITasksCollectionService.GetTasksByStatus(System.String)">
            <summary>
            Gets tasks by their status.
            </summary>
            <param name="status">The status of the tasks to get.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a list of tasks with the specified status.</returns>
        </member>
        <member name="T:Server.Services.NotificationsHub">
            <summary>
            Represents a SignalR hub for notifications.
            </summary>
        </member>
        <member name="M:Server.Services.NotificationsHub.BroadcastMessage(System.Object[])">
            <summary>
            Broadcasts a message to all connected clients.
            </summary>
            <param name="messages">The messages to broadcast.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Server.Services.TasksCollectionService">
            <summary>
            Service for managing tasks in a MongoDB collection.
            </summary>
        </member>
        <member name="M:Server.Services.TasksCollectionService.#ctor(Server.Settings.IMongoDBSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Services.TasksCollectionService"/> class.
            </summary>
            <param name="settings">The MongoDB settings.</param>
        </member>
        <member name="M:Server.Services.TasksCollectionService.Create(Server.Models.TaskModel,System.Boolean)">
            <summary>
            Creates a new task.
            </summary>
            <param name="task">The task to create.</param>
            <param name="keepId">Whether to keep the existing ID of the task.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating whether the creation was successful.</returns>
        </member>
        <member name="M:Server.Services.TasksCollectionService.Create(Server.Models.TaskModel)">
            <summary>
            Creates a new task.
            </summary>
            <param name="task">The task to create.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating whether the creation was successful.</returns>
        </member>
        <member name="M:Server.Services.TasksCollectionService.Delete(System.Guid)">
            <summary>
            Deletes a task.
            </summary>
            <param name="id">The ID of the task to delete.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating whether the deletion was successful.</returns>
        </member>
        <member name="M:Server.Services.TasksCollectionService.Get(System.Guid)">
            <summary>
            Gets a task.
            </summary>
            <param name="id">The ID of the task to get.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the task if found, null otherwise.</returns>
        </member>
        <member name="M:Server.Services.TasksCollectionService.GetAll">
            <summary>
            Gets all tasks.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a list of all tasks.</returns>
        </member>
        <member name="M:Server.Services.TasksCollectionService.Update(System.Guid,Server.Models.TaskModel)">
            /// <summary>
            Updates a task.
            </summary>
            <param name="id">The ID of the task to update.</param>
            <param name="taskModel">The updated task.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating whether the update was successful.</returns>
        </member>
        <member name="M:Server.Services.TasksCollectionService.GetTasksByStatus(System.String)">
            <summary>
            Gets tasks by status.
            </summary>
            <param name="status">The status of the tasks to get.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a list of tasks with the specified status.</returns>
        </member>
        <member name="M:Server.Services.TasksCollectionService.Exists(System.Guid)">
            <summary>
            Checks if a task exists.
            </summary>
            <param name="id">The ID of the task to check.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean indicating whether the task exists.</returns>
        </member>
        <member name="T:Server.Settings.IMongoDBSettings">
            <summary>
            Interface for MongoDB settings.
            </summary>
        </member>
        <member name="P:Server.Settings.IMongoDBSettings.TasksCollectionName">
            <summary>
            Gets or sets the name of the tasks collection.
            </summary>
        </member>
        <member name="P:Server.Settings.IMongoDBSettings.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:Server.Settings.IMongoDBSettings.DatabaseName">
            <summary>
            Gets or sets the name of the database.
            </summary>
        </member>
        <member name="T:Server.Settings.MongoDBSettings">
            <summary>
            Represents the MongoDB settings.
            </summary>
        </member>
        <member name="P:Server.Settings.MongoDBSettings.TasksCollectionName">
            <summary>
            Gets or sets the name of the tasks collection.
            </summary>
        </member>
        <member name="P:Server.Settings.MongoDBSettings.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:Server.Settings.MongoDBSettings.DatabaseName">
            <summary>
            Gets or sets the name of the database.
            </summary>
        </member>
    </members>
</doc>
